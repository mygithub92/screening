type Sceening @model @auth(rules: [{ allow: public }]) {
  id: ID!
  jobs: [Job] @manyToMany(relationName: "SceeningJob")
  crews: [Crew] @manyToMany(relationName: "SceeningCrew")
  options: [Option] @manyToMany(relationName: "SceeningOption")
}

type Form @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String
  questions: [Question] @hasMany
  jobs: [Job] @manyToMany(relationName: "FormJob")
}

type Job @model @auth(rules: [{ allow: public }]) {
  id: ID!
  code: String
  startDate: String
  endDate: String
  sceenings: [Sceening] @manyToMany(relationName: "SceeningJob")
  forms: [Form] @manyToMany(relationName: "FormJob")
  crews: [Crew] @manyToMany(relationName: "CrewJob")
}

type Question @model @auth(rules: [{ allow: public }]) {
  id: ID!
  title: String
  options: [Option] @manyToMany(relationName: "QuestionOption")
  form: Form @belongsTo
  order: Int @index
  optionOrderDesc: Boolean
}

type Option @model @auth(rules: [{ allow: public }]) {
  id: ID!
  label: String
  value: String
  questions: [Question] @manyToMany(relationName: "QuestionOption")
  sceenings: [Sceening] @manyToMany(relationName: "SceeningOption")
  order: Int @index
}

type Crew @model @auth(rules: [{ allow: public }]) {
  id: ID!
  userName: String
  companyName: String
  address: String
  phonenumber: String
  name: String
  email: String
  defaultJobId: String
  sceenings: [Sceening] @manyToMany(relationName: "SceeningCrew")
  jobs: [Job] @manyToMany(relationName: "CrewJob")
}
