type Sceening @model @auth(rules: [{ allow: public }]) {
  id: ID!
  jobId: String
  jobName: String
  crewId: String
  crewName: String
  crewPhoneNumber: String
  result: String
  method: String
  staffId: String
  staffName: String
  processed: Boolean
  location: String
  processedAt: AWSDateTime
  submittedAt: AWSDateTime
  answeredQuestions: [AnsweredQuestion] @hasMany
}

type AnsweredQuestion @model @auth(rules: [{ allow: public }]) {
  id: ID!
  question: String
  answer: String
  sceening: Sceening @belongsTo
  order: Int
}

type Form @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String
  questions: [Question] @hasMany
  jobs: [Job] @manyToMany(relationName: "FormJob")
}

type Job @model @auth(rules: [{ allow: public }]) {
  id: ID!
  code: String
  location: String
  startDate: AWSDateTime
  endDate: AWSDateTime
  forms: [Form] @manyToMany(relationName: "FormJob")
  crews: [Crew] @manyToMany(relationName: "CrewJob")
}

type Question @model @auth(rules: [{ allow: public }]) {
  id: ID!
  title: String
  options: [Option] @manyToMany(relationName: "QuestionOption")
  form: Form @belongsTo
  order: Int
  optionOrderDesc: Boolean
}

type Option @model @auth(rules: [{ allow: public }]) {
  id: ID!
  label: String
  value: String
  questions: [Question] @manyToMany(relationName: "QuestionOption")
  order: Int
}

type Crew @model @auth(rules: [{ allow: public }]) {
  id: ID!
  userName: String
  role: String
  DOB: AWSDateTime
  healthCardNumber: String
  vaxxStatus: String
  userAgreement: String
  companyName: String
  address: String
  phonenumber: String
  name: String
  email: String
  defaultJobId: String
  jobs: [Job] @manyToMany(relationName: "CrewJob")
}
